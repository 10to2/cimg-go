version: 2.1

orbs:
  sonar: hubci/sonar@1.0.0
  cimg-orb: circleci/cimg-orb@0.1.4

workflows:
  main:
    jobs:
      # - cimg-orb/build-and-deploy:
      #     image: cimg/go
      #     context: cimg-publishing
      - build-check:
          # requires:
            # - cimg-orb/build-and-deploy
          context: cimg-publishing
      - run-check:
          requires:
            - build-check
          context: cimg-publishing
      - push-checks:
          # requires:
          #   - run-check
          context: cimg-publishing
      - check-digests:
          requires:
            - push-checks
          context: cimg-publishing


jobs:
  build-check:
    docker:
      - image: cimg/base:2022.06
    steps:
      - setup_remote_docker:
          version: "20.10.12"
      - checkout
      - run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - run: |
            # this is being run here in lieu of the build and deploy step but needs to be combined or strings persisted
            # since docker images only looks on the local host, which was preventing me from checking whether
            # builds were made or not
            chmod +x && ./build-images.sh
      - run:
          name: Checks to see if all images in build-images were built
          command: |
            # have some sort of logical operator to check build and push since they should match
            BUILDS=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "cimg/go")
            for i in $(cat push-images.sh | awk '/cimg/{print $3}'); do
              BUILT=$(grep -q "$i" \<<< $BUILDS; echo $?)
              if [ $BUILT -ne 0 ]; then
                echo "Image $i was not built"
                exit 1
              fi
            done
      - 
  run-check:
    docker:
      - image: cimg/base:2022.06
    steps:
      - setup_remote_docker:
          version: "20.10.12"
      - checkout
      - run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Checks to see if all images within the registry are runnable and match their versions
          command: |
            # the grep should be parameterized
            # can likely persist this data all the way down
            # IMAGES=$(docker images --format "{{.Repository}}:{{.Tag}}" | grep "cimg/go")
            for i in $(cat push-images.sh | awk '/cimg/{print $3}'); do
              echo "Testing $i"
              VERSION=$(echo $i | cut -d ":" -f 2 | cut -d "-" -f 1)
              VER_CHECK=$(docker run --platform linux/amd64 -i $i /bin/bash -c 'go version | grep -q "$VERSION"; echo $?')
              if [ $VER_CHECK -ne 0 ]; then
                echo "version check failed for $i"
              else
                echo "version check passed for $i"
                exit 1
              fi
            done
  push-checks:
    docker:
      - image: cimg/base:2022.06
    steps:
      - setup_remote_docker:
          version: "20.10.12"
      - checkout
      - run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Test if all pushed images should have matching hashes.
          command: |
            if [[ ! -e /tmp/digest.txt ]]; then
              touch /tmp/digest.txt
            fi

            for i in $(cat push-images.sh | awk '/cimg/{print $3}'); do
                echo "Testing $i"
                # digests should eventually be uploaded somewhere to check if they are correct periodically
                echo "$(docker image pull $i | grep -e Digest -e Status)" >> /tmp/digest.txt
            done
      - persist_to_workspace:
          root: /tmp
          paths:
            - digest.txt
      - store_artifacts:
          path: /tmp/digest.txt
  check-digests:
    docker:
      - image: cimg/base:2022.06
    steps:
      - setup_remote_docker:
          version: "20.10.12"
      - checkout
      - attach_workspace:
          at: /tmp
      - run: echo $DOCKER_TOKEN | docker login -u $DOCKER_USER --password-stdin
      - run:
          name: Compare Digests to verify authenticity
          command: |
            DIGESTS=$(docker image ls --format "{{.Repository}}:{{.Tag}} {{.DIGEST}}" | awk '{print $2}')
            for d in $DIGESTS; do
              if [[ $d =~ sha256: ]]; then
                CHECK=$(awk '/sha256:/ {print $0}' /tmp/digest.txt | cut -d:  -f2- | grep -q '$d'; echo $?)
                if [[ $CHECK -eq 0 ]]; then
                  echo "Digest check passed"
                else
                  echo "Digest check failed:"
                  exit 1
                fi
              fi
            done